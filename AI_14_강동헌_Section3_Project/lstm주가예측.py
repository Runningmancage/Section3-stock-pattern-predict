# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10yJrLqo_soiazW4rCJ3zAIpBdHKfSrSh
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Conv1D, Lambda
import datetime

df = pd.read_csv('sam22y.csv')

df.head()

high_price = df['High'].values
low_price = df['Low'].values
mid_price = (high_price + low_price)/2

#create Window

seq_len = 50  #최근 50일 데이터로 그 다음날 예측
sequence_length = seq_len + 1 #이렇게 하나씩 밀리면서 예측

result = []
for index in range(len(mid_price) - sequence_length):
  result.append(mid_price[index: index + sequence_length])

#Normalize Data

normalized_data=[]
for window in result:
  normalized_window = [((float(p) / float(window[0]))-1)for p in window]
  normalized_data.append(normalized_window)

result1 = np.array(normalized_data)

#train / test 분리
row = int(round(result1.shape[0]*0.9))
train = result1[:row, :]
np.random.shuffle(train)

X_train = train[:, :-1]
X_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1))
y_train = train[:, -1]

X_test = result1[row:, :-1]
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))
y_test = result1[row:,-1]

X_train.shape, X_test.shape

#build model

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(50,1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(1, activation='linear'))
model.compile(loss='mse', optimizer='rmsprop')
model.summary()

#trainnig

model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=10, epochs=20)

#predict

pred = model.predict(X_test)
fig = plt.figure(facecolor='White')
ax = fig.add_subplot(111)
ax.plot(y_test, label = 'True')
ax.plot(pred, label= 'Prediction')
ax.legend()
plt.show()